/* eslint-disable no-undef */
const { Sequelize } = require('sequelize');
const CarModel = require('../../model/carModel');
const CarIdNotDefinedError = require('../../error/CarIdNotDefinedError');
const CarRepository = require('../carRepository');
const Car = require('../../entity/car');

const sequelizeInstance = new Sequelize('sqlite::memory');
/**
 * @type CarRepository
 */
let repository;

const sampleCar = new Car({
  crestUrl: 'fiat-147.png',
  carModel: '147',
  brand: 'Fiat',
  year: 1995,
  kilometres: 237500,
  color: 'White',
  airConditioner: false,
  gearBox: 'Manual',
  rentalValuePerDay: 1500,
});

beforeAll(() => {
  const car = CarModel.setup(sequelizeInstance);
  repository = new CarRepository(car);
});

beforeEach(async () => {
  await sequelizeInstance.sync({ force: true });
});

test('Crea un vehiculo cuando la entidad no tiene id', async () => {
  const NEW_AUTOGENERATED_ID = 1;
  const newCar = await repository.save(sampleCar);
  expect(newCar.id).toEqual(NEW_AUTOGENERATED_ID);
});

test('Guardar un vehiculo existente actualiza los valores', async () => {
  const NEW_AUTOGENERATED_ID = 1;
  const newCar = await repository.save(sampleCar);
  expect(newCar.id).toEqual(NEW_AUTOGENERATED_ID);

  newCar.rentalValuePerDay = 1750;
  const modifiedCar = await repository.save(newCar);

  expect(modifiedCar.id).toEqual(NEW_AUTOGENERATED_ID);
  expect(modifiedCar.rentalValuePerDay).toEqual(1750);
});

test('Eliminar un vehiculo devuelve true', async () => {
  const NEW_AUTOGENERATED_ID = 1;
  const newCar = await repository.save(sampleCar);
  expect(newCar.id).toEqual(NEW_AUTOGENERATED_ID);

  await expect(repository.delete(newCar)).resolves.toEqual(true);
});

test('Eliminar un vehiculo sin parametros da error', async () => {
  await expect(repository.delete()).rejects.toThrow(CarIdNotDefinedError);
});

test('Eliminar un vehiculo sin ID da error', async () => {
  await expect(repository.delete({})).rejects.toThrow(CarIdNotDefinedError);
});

test('Eliminar un vehiculo con ID inexistente devuelve false', async () => {
  await expect(repository.delete({ id: 1 })).resolves.toEqual(false);
});
