/* eslint-disable no-undef */
const { Sequelize } = require('sequelize');
const User = require('../../entity/User');
const UserModel = require('../../model/userModel');
const UserRepository = require('../userRepository');
const UserIdNotDefinedError = require('../../error/UserIdNotDefinedError');
const UserNotDefinedError = require('../../error/UserNotDefinedError');

const sequelizeInstance = new Sequelize('sqlite::memory');

/**
 * @type UserRepository
 */
let repository;

const sampleUser = new User({
  firstName: 'Juan Maria',
  lastName: 'Fernandez',
  documentType: 'DNI',
  documentNumber: 41072694,
  nationality: 'Argentina',
  address: 'Av. San Martin 270',
  phoneNumber: '3329655848',
  email: 'example@example.com',
  birthdate: '17/4/1998',
  createdAt: '',
  updatedAt: '',
  deletedAt: '',
});

beforeAll(() => {
  const user = UserModel.setup(sequelizeInstance);
  repository = new UserRepository(user);
});

beforeEach(async () => {
  await sequelizeInstance.sync({ force: true });
});

test('Crea un usuario cuando la entidad no tiene id', async () => {
  const NEW_AUTOGENERATED_ID = 1;
  const newUser = await repository.save(sampleUser);
  expect(newUser.id).toEqual(NEW_AUTOGENERATED_ID);
});

test('Llamar a save sin parametros  devuelve un error especifico', async () => {
  await expect(repository.save()).rejects.toThrowError(UserNotDefinedError);
  await expect(repository.save()).rejects.toThrowError('On userRepository(save) the user is undefined');
});

test('Llamar a getById  sin parametros devuelve un error especifico', async () => {
  await expect(repository.getById()).rejects.toThrowError(UserIdNotDefinedError);
});

test('Llamar a delete sin parametros devuelve un error especifico', async () => {
  await expect(repository.delete()).rejects.toThrowError(UserIdNotDefinedError);
});

test('Llamar a delete con parametros correcto devuelve true', async () => {
  const newUser = await repository.save(sampleUser);
  await expect(repository.delete(newUser)).toBeTruthy();
});
